#    Represents the Swagger documentation for the expense routes 
#    in the form of ./backend/src/routes/expense/expense.route.ts

paths:
  # Add an expense to a group made by an user
  /expense/addExpense:
    post:
      summary: Add an expense to a group made by an user.
      description: Add an expense to a group made by an user.
      tags:
      - Expense API's
      security:
      - BearerAuth: []
      requestBody:
        description:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  type: string
                  description: Group Id of the group to which the expense will be added.
                  example: "668ab2a826830e738cd1c108"
                expenseName:
                  type: string
                  description: Name of the expense.
                  example: "Food"
                expenseDescription:
                  type: string
                  description: Description of the expense.
                  example: "Fooding with Francis"
                expenseAmount:
                  type: number
                  description: Amount of the expense.
                  example: 80
                expenseOwner:
                  type: string
                  description: Name of the owner of the expense.
                  example: "test@gmail.com"
                expenseMembers:
                  type: array
                  description: List of email addresses of the members associated with the expense.
                  items:
                    type: string
                    format: email
                    example: "test1@gmail.com"
                  example:
                  - "test1@gmail.com"
                  - "test2@gmail.com"
                  - "test3@gmail.com"

      responses:
        200:
          description: Successful addition of the expense.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
                  message:
                    type: string
                    example: "New expense added"
                  expenseId:
                    type: string
                    example: "67019fbd5bacc7c300309b1d"
                  splitUpdateResponse:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: "Split completed successfully"
        400:
          description: Bad request.
        500:
          description: Internal server error.

  # Edit an expense to a group made by an user
  /expense/editExpense:
    put:
      summary: Edit an expense to a group made by an user.
      description: Edit an expense to a group made by an user.
      tags:
      - Expense API's
      security:
      - BearerAuth: []
      requestBody:
        description:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Expense Id
                  example: "668ab2a826830e738cd1c108"
                groupId:
                  type: string
                  description: Group Id of the group to which the expense will be added.
                  example: "668ab2a826830e738cd1c108"
                expenseName:
                  type: string
                  description: Name of the expense.
                  example: "Food"
                expenseDescription:
                  type: string
                  description: Description of the expense.
                  example: "Fooding with Francis"
                expenseAmount:
                  type: number
                  description: Amount of the expense.
                  example: 80
                expenseOwner:
                  type: string
                  description: Name of the owner of the expense.
                  example: "test@gmail.com"
                expenseMembers:
                  type: array
                  description: List of email addresses of the members associated with the expense.
                  items:
                    type: string
                    format: email
                    example: "test1@gmail.com"
                  example:
                  - "test1@gmail.com"
                  - "test2@gmail.com"
                  - "test3@gmail.com"

      responses:
        200:
          description: Successful edit of the expense.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
                  message:
                    type: string
                    example: "Expense Edited"
                  response:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The unique identifier of the group.
                        example: "6706f59fdca7f9feb4fb6c5e"
                      allof:
                      - $ref: '#/components/schemas/Expense'
                      createdAt:
                        type: string
                        format: date-time
                        description: The creation timestamp.
                        example: "2024-10-09T21:29:03.767Z"
                      updatedAt:
                        type: string
                        format: date-time
                        description: The last update timestamp.
                        example: "2024-10-09T21:29:03.767Z"
                      __v:
                        type: number
                        description: The version key for the group document.
                        example: 0
        400:
          description: Bad request.
        500:
          description: Internal server error.

  # View an expense 
  /expense/viewExpense:
    post:
      summary: Get an expense by expenseId.
      description: Get an expense by expenseId.
      tags:
      - Expense API's
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Expense Id
                  example: "6707be2be8c46b8b7ebcd7cf"
      responses:
        200:
          description: Successfully fetched the expense details by expenseId.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
                  expense:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The unique identifier of the group.
                        example: "6706f59fdca7f9feb4fb6c5e"
                      allof:
                      - $ref: '#/components/schemas/Expense'
                      createdAt:
                        type: string
                        format: date-time
                        description: The creation timestamp.
                        example: "2024-10-09T21:29:03.767Z"
                      updatedAt:
                        type: string
                        format: date-time
                        description: The last update timestamp.
                        example: "2024-10-09T21:29:03.767Z"
                      __v:
                        type: number
                        description: The version key for the group document.
                        example: 0
        400:
          description: Bad request.
        500:
          description: Internal server error.

  # Delete an expense
  /expense/deleteExpense:
    post:
      summary: Delete an expense by expenseId.
      description: Delete an expense by expenseId.
      tags:
      - Expense API's
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Expense Id
                  example: "668ab2a826830e738cd1c108"
      responses:
        '200':
          description: Successfully deleted the expense.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                    description: Status of the expense delete operation.
                  message:
                    type: string
                    example: Expense deleted successfully!
                    description: Message describing the deletion of the expense.
                  response:
                    type: object
                    properties:
                      acknowledged:
                        type: boolean
                        example: true
                        description: Indicates whether the operation was acknowledged by the server.
                      deletedCount:
                        type: integer
                        example: 1
                        description: Number of documents deleted.
        '400':
          description: Bad request.
        '500':
          description: Internal server error.
